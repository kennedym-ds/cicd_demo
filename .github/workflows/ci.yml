name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  lint-and-security:
    name: Lint and Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install --only=dev

      - name: Run black (code formatting check)
        run: poetry run black --check src tests

      - name: Run isort (import sorting check)
        run: poetry run isort --check-only src tests

      - name: Run bandit (security scan)
        run: poetry run bandit -r src/

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint-and-security
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install

      - name: Run tests with coverage
        run: poetry run pytest --cov=src/python_cicd_demo --cov-report=xml --cov-report=term-missing

      - name: Generate coverage badge
        run: poetry run python scripts/generate_coverage_badge.py --output coverage-badge.svg
        if: matrix.python-version == '3.11'  # Only generate badge once

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            coverage.xml
            .coverage
            coverage-badge.svg
          retention-days: 30

  publish-coverage-badge:
    name: Publish Coverage Badge
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-results-3.11
          path: ./

      - name: Commit and push coverage badge
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create badges directory if it doesn't exist
          mkdir -p badges

          # Copy the coverage badge
          cp coverage-badge.svg badges/coverage.svg

          # Add and commit if changed
          git add badges/coverage.svg
          if git diff --cached --quiet; then
            echo "Coverage badge unchanged"
          else
            git commit -m "Update coverage badge [skip ci]"
            git push
          fi
